<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="QuickInsert_content_Tip" xml:space="preserve">
    <value>Zawartość</value>
  </data>
  <data name="Defaults_NewCss" xml:space="preserve">
    <value>nowy-styl</value>
  </data>
  <data name="Defaults_NewFile" xml:space="preserve">
    <value>nowy-plik</value>
  </data>
  <data name="Defaults_NewHtml" xml:space="preserve">
    <value>nowa-strona</value>
  </data>
  <data name="Defaults_NewHtmlInclude_Contents" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;title&gt;Nowa strona HTML&lt;/title&gt;
    &lt;meta charset="utf-8"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Nowa strona HTML&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="Defaults_NewHtmlPage_Contents" xml:space="preserve">
    <value>&lt;!-- attrib template: default --&gt;
&lt;!-- attrib title: Nowa strona HTML --&gt;
</value>
  </data>
  <data name="Defaults_NewHtmlTemplate_Contents" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;title&gt;[#title#]&lt;/title&gt;
    &lt;meta charset="utf-8"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;[#title#]&lt;/h1&gt;
    [#content#]
  &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="Defaults_NewJs" xml:space="preserve">
    <value>nowy-skrypt</value>
  </data>
  <data name="Defaults_NewMd" xml:space="preserve">
    <value>nowa-strona</value>
  </data>
  <data name="Defaults_NewMdPage_Contents" xml:space="preserve">
    <value>&lt;!-- attrib template: default --&gt;
&lt;!-- attrib title: Nowa strona Markdown --&gt;
</value>
  </data>
  <data name="Defaults_NewPhp" xml:space="preserve">
    <value>nowa-strona</value>
  </data>
  <data name="Defaults_NewPhpOther_Contents" xml:space="preserve">
    <value>&lt;?php
      echo "To będzie interpretowane przez serwer. Witaj świecie!";
?&gt;</value>
  </data>
  <data name="Defaults_NewPhpPage_Contents" xml:space="preserve">
    <value>&lt;!-- attrib template: default --&gt;
&lt;!-- attrib title: Nowa Strona PHP --&gt;
&lt;?php
      echo "To będzie interpretowane przez serwer. Witaj świecie!";
?&gt;</value>
  </data>
  <data name="Error_BuildFailed" xml:space="preserve">
    <value>Apricot zwócił ten wyjątek:

{0}</value>
  </data>
  <data name="Error_BuildFailed_Title" xml:space="preserve">
    <value>Budowanie nie powiodło się</value>
  </data>
  <data name="Error_BuildToViewOutput" xml:space="preserve">
    <value>Najpierw zbuduj stronę, aby wyświetlić dane wyjściowe.</value>
  </data>
  <data name="Error_CouldNotSaveFile" xml:space="preserve">
    <value>Plik nie mógł zostać zapisany.</value>
  </data>
  <data name="Error_LogSaveFail" xml:space="preserve">
    <value>Coś nie powiodło się podczas próby zapisania dziennika zdarzeń:

{0}</value>
  </data>
  <data name="Error_LogSaveFail_Title" xml:space="preserve">
    <value>Nie udało się zapisać</value>
  </data>
  <data name="Error_UpgradeFail" xml:space="preserve">
    <value>AutoSite nie może zmienić nazwy folderu in\ na pages\. Zmień nazwę folderu manualnie i otwórz swoją stronę ponownie.</value>
  </data>
  <data name="Error_UpgradeFail_Title" xml:space="preserve">
    <value>Nie udało się przekonwertować</value>
  </data>
  <data name="Prompt_CreateSite" xml:space="preserve">
    <value>AutoSite stworzy stronę w folderze znajdującym się w {0}. W porządku?</value>
  </data>
  <data name="Prompt_ProjectUpgrade" xml:space="preserve">
    <value>AutoSite używa teraz ścieżki pages\ dla folderu Strony. Ta konwersja będzie miała wpływ na kompatybilność ze starszymi wersjami AutoSite.</value>
  </data>
  <data name="Prompt_ProjectUpgrade_Title" xml:space="preserve">
    <value>Zaktualizuj stronę</value>
  </data>
  <data name="Prompt_SanitaryBuild" xml:space="preserve">
    <value>Czysta kompilacja przeniesie folder wyjściowy do kosza przed budową, usuwając wszystkie osierocone pliki.</value>
  </data>
  <data name="Prompt_SaveChangesToFile" xml:space="preserve">
    <value>Zapisać zmiany do {0}?</value>
  </data>
  <data name="Prompt_SaveFilesBeforeClosing" xml:space="preserve">
    <value>Niektóre pliki zawierają niezapisane zmiany. Zapisać je?</value>
  </data>
  <data name="QuickInsert_Build" xml:space="preserve">
    <value>Zbuduj, aby uzyskać więcej opcji</value>
  </data>
  <data name="QuickInsert_Build_Tip" xml:space="preserve">
    <value>Zbuduj</value>
  </data>
  <data name="QuickInsert_Build_TipText" xml:space="preserve">
    <value>AutoSite może dać Ci więcej sugestii gdy budujesz swoją stronę i jak wypełniasz mapę atrybutów.</value>
  </data>
  <data name="QuickInsert_content_TipText" xml:space="preserve">
    <value>Pokazuje wyjściową zawartość strony. 

Użyj jednokrotnie w szablonach.</value>
  </data>
  <data name="QuickInsert_DefineGeneric_Tip" xml:space="preserve">
    <value>Zdefiniuj {0}</value>
  </data>
  <data name="QuickInsert_DefineGeneric_TipText" xml:space="preserve">
    <value>Zdefiniuje atrybut {0} dla tej strony.</value>
  </data>
  <data name="QuickInsert_DefineNew_Tip" xml:space="preserve">
    <value>Zdefiniuj nowy atrybut</value>
  </data>
  <data name="QuickInsert_DefineNew_TipText" xml:space="preserve">
    <value>Dodaje definicję atrybutu.</value>
  </data>
  <data name="QuickInsert_DefineTemplate_TipText" xml:space="preserve">
    <value>Definiuje szablon używany przez bieżącą stronę.

Domyślnym jest {0}, który wskazuje AutoSite użycie {1} w folderze szablonów.</value>
  </data>
  <data name="QuickInsert_Generic_TipText" xml:space="preserve">
    <value>Wyświetla wartość strony dla atrybutu {0}.</value>
  </data>
  <data name="QuickInsert_InsertConditional_Tip" xml:space="preserve">
    <value>Wstaw warunkową</value>
  </data>
  <data name="QuickInsert_InsertConditional_TipText" xml:space="preserve">
    <value>Otwórz okno dialogowe Wstaw warunkowe.

Warunkowe pozwalają na wyświetlenie tekstu jeśli dany atrybut ma określoną wartość.</value>
  </data>
  <data name="QuickInsert_modified_Tip" xml:space="preserve">
    <value>Data ostatniej modyfikacji</value>
  </data>
  <data name="QuickInsert_modified_TipText" xml:space="preserve">
    <value>Wyświetla datę ostatniej modyfikacji strony.</value>
  </data>
  <data name="QuickInsert_path_Tip" xml:space="preserve">
    <value>Ścieżka</value>
  </data>
  <data name="QuickInsert_path_TipText" xml:space="preserve">
    <value>Wyświetla względną ścieżkę strony od katalogu głównego.</value>
  </data>
  <data name="QuickInsert_root_Tip" xml:space="preserve">
    <value>Względna ścieżka do katalogu głównego</value>
  </data>
  <data name="QuickInsert_root_TipText" xml:space="preserve">
    <value>Wyświetla ścieżkę względną od strony do katalogu głównego strony.

Użyj tego, aby rozpocząć ścieżki do arkuszy stylów, obrazów i innych stron.</value>
  </data>
  <data name="QuickInsert__Example" xml:space="preserve">
    <value>Przykład: {0}</value>
  </data>
  <data name="QuickInsert__Output" xml:space="preserve">
    <value>Wyjście: {0}</value>
  </data>
  <data name="UI_AddFilesDialog_Title" xml:space="preserve">
    <value>Dodaj pliki do {0}</value>
  </data>
  <data name="UI_StartPage_Title" xml:space="preserve">
    <value>Strona startowa</value>
  </data>
  <data name="Explorer_Includes" xml:space="preserve">
    <value>Zawartość</value>
  </data>
  <data name="Explorer_Pages" xml:space="preserve">
    <value>Strony</value>
  </data>
  <data name="Explorer_Templates" xml:space="preserve">
    <value>Szablony</value>
  </data>
  <data name="Prompt_ChangesOnRestart" xml:space="preserve">
    <value>Zmiany zostaną zastosowane po ponownym uruchomieniu.</value>
  </data>
  <data name="UI_Editor_ViewFile" xml:space="preserve">
    <value>Widok</value>
  </data>
</root>